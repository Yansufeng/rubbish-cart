// Code generated by goctl. DO NOT EDIT!
// Source: cart.proto

//go:generate mockgen -destination ./cart_mock.go -package cartclient -source $GOFILE

package cartclient

import (
	"context"

	"rubbish-cart/rpc/cart/cart"

	"github.com/tal-tech/go-zero/zrpc"
)

type (
	AlarmResp        = cart.AlarmResp
	CartRegisterResp = cart.CartRegisterResp
	CartUpdateResp   = cart.CartUpdateResp
	CartUpdateReq    = cart.CartUpdateReq
	AlarmReq         = cart.AlarmReq
	CartInfo         = cart.CartInfo
	GetInfoResp      = cart.GetInfoResp
	Empty            = cart.Empty
	CartRegisterReq  = cart.CartRegisterReq

	Cart interface {
		CartRegister(ctx context.Context, in *CartRegisterReq) (*CartRegisterResp, error)
		CartUpdate(ctx context.Context, in *CartUpdateReq) (*CartUpdateResp, error)
		Alarm(ctx context.Context, in *AlarmReq) (*AlarmResp, error)
		GetInfo(ctx context.Context, in *Empty) (*GetInfoResp, error)
	}

	defaultCart struct {
		cli zrpc.Client
	}
)

func NewCart(cli zrpc.Client) Cart {
	return &defaultCart{
		cli: cli,
	}
}

func (m *defaultCart) CartRegister(ctx context.Context, in *CartRegisterReq) (*CartRegisterResp, error) {
	client := cart.NewCartClient(m.cli.Conn())
	return client.CartRegister(ctx, in)
}

func (m *defaultCart) CartUpdate(ctx context.Context, in *CartUpdateReq) (*CartUpdateResp, error) {
	client := cart.NewCartClient(m.cli.Conn())
	return client.CartUpdate(ctx, in)
}

func (m *defaultCart) Alarm(ctx context.Context, in *AlarmReq) (*AlarmResp, error) {
	client := cart.NewCartClient(m.cli.Conn())
	return client.Alarm(ctx, in)
}

func (m *defaultCart) GetInfo(ctx context.Context, in *Empty) (*GetInfoResp, error) {
	client := cart.NewCartClient(m.cli.Conn())
	return client.GetInfo(ctx, in)
}
