// Code generated by goctl. DO NOT EDIT!
// Source: user.proto

//go:generate mockgen -destination ./user_mock.go -package userclient -source $GOFILE

package userclient

import (
	"context"

	"rubbish-cart/rpc/user/user"

	"github.com/tal-tech/go-zero/zrpc"
)

type (
	GetRegisterReq     = user.GetRegisterReq
	GetRegisterResp    = user.GetRegisterResp
	UserInfo           = user.UserInfo
	GetUserListResp    = user.GetUserListResp
	GetOpenIdReq       = user.GetOpenIdReq
	GetPurviewReq      = user.GetPurviewReq
	GetPurviewResp     = user.GetPurviewResp
	UpdateUserInfoReq  = user.UpdateUserInfoReq
	UpdateUserInfoResp = user.UpdateUserInfoResp
	Empty              = user.Empty
	GetOpenIdResp      = user.GetOpenIdResp

	User interface {
		GetOpenId(ctx context.Context, in *GetOpenIdReq) (*GetOpenIdResp, error)
		GetPurview(ctx context.Context, in *GetPurviewReq) (*GetPurviewResp, error)
		GetRegister(ctx context.Context, in *GetRegisterReq) (*GetRegisterResp, error)
		GetUserList(ctx context.Context, in *Empty) (*GetUserListResp, error)
		UpdateUserInfo(ctx context.Context, in *UpdateUserInfoReq) (*UpdateUserInfoResp, error)
	}

	defaultUser struct {
		cli zrpc.Client
	}
)

func NewUser(cli zrpc.Client) User {
	return &defaultUser{
		cli: cli,
	}
}

func (m *defaultUser) GetOpenId(ctx context.Context, in *GetOpenIdReq) (*GetOpenIdResp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.GetOpenId(ctx, in)
}

func (m *defaultUser) GetPurview(ctx context.Context, in *GetPurviewReq) (*GetPurviewResp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.GetPurview(ctx, in)
}

func (m *defaultUser) GetRegister(ctx context.Context, in *GetRegisterReq) (*GetRegisterResp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.GetRegister(ctx, in)
}

func (m *defaultUser) GetUserList(ctx context.Context, in *Empty) (*GetUserListResp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.GetUserList(ctx, in)
}

func (m *defaultUser) UpdateUserInfo(ctx context.Context, in *UpdateUserInfoReq) (*UpdateUserInfoResp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.UpdateUserInfo(ctx, in)
}
